.container{
  background-color: #eee;
  width: 1000px;
  margin: 30px auto;
  
  // height: 1000px;
  
  display: grid;
    // Basically height of rows first value forfirst row and second value for second row
    // grid-template-rows: 150px 150px;
    // grid-template-columns: 150px 150px 150px;
    
    // Repeate:  to define all of these rows here one by one
    grid-template-rows: repeat(2, 150px);
    // grid-template-columns: repeat(3, 150px);
   
    // if 3rd cloumn has 300px
    // grid-template-columns: repeat(2, 150px) 300px;
  
  
    // Fractional Unit (fr): It expands to all the space that it can occupy (occupies all the remaining space)
    // grid-template-columns: repeat(2, 150px) 1fr;
  
    // grid-template-row: repeat(2, 1fr);
         grid-template-columns: repeat(3, 1fr);
  
    // grid-template-columns: 1fr 2fr 1fr;
  
    // 50% of whole entier element width(1000px) doesnot take gap
    // grid-template-columns: 50% 1fr 1fr;

  
   // space between the grid items: gutter
  //  grid-row-gap: 30px;   // this is replaced by row-gap
   row-gap: 30px;
   // grid-column-gap: 30px; // this is replaced by column-gap
   column-gap: 30px;
  
   // same gap for everything (row column)
     grid-gap: 30px;
  
}


.item {
  padding: 20px;
  font-size: 30px;
  font-family: sans-serif;
  color: white;
  
  &--1 {
    background-color: orangered;
    
    // Grid cell: It is the area between two adjacent row and column line.
    // Thats the number of the row line in which we want this to start and end.
      // grid-row-start: 2;
      // grid-row-end: 3;
      
    // Shorthand: this where it start / where it ends
         grid-row: 2 / 3;
    
    // Thats the number of the column line in which we want this to start and end.
      // grid-column-start: 2;
      // grid-column-end: 3;
    
    // Shorthand: this where it start / where it ends
         grid-column: 2 / 3;
    
    // To be top and to be visible
    z-index: 10;
    
          
  }
  
  &--2{
    background-color: yellowgreen;
    
    // grid-column: 1 / 3;
    
    // Span: it's gonna across two grid cells starts from 1,
    // grid-column: 1 / span 2;
    
    // let's pretend that we don't remember how many columns we have all we know is that we want it to be all until the end and in order to represent the end all we have to do say minus one.
      grid-column:   1 / -1;
    
    

  }
  
  &--3{
    background-color: blueviolet;
    
    // Now it occupies both of these cells spanning.
    // Now what about this grid item that wsa here before? :then css grid will automatically add a new row or a new column and this part here is called an implicit grid
     grid-column: 1 / 3;
     grid-row: 2 / 3;  // telling explicitly it to stay in this exact row 
  }
   
  &--4{
    background-color: palevioletred;
  }
  
  &--5{
    background-color: royalblue;
    
    // grid-row: 1 / 2;
    // grid-column: 3 / 4;
    
    // More shorthand: It defines where, 1- row starts / 3- columns starts / 2- row ends / 4- columns ends
      // grid-area: 1 / 3 / 2 / 4;
        
    // It spans two grid cell here
    grid-area: 1 / 3 / 3 / 4;

    
  }
  
  &--6{
    background-color: goldenrod;
    
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    // grid-area: 1 / 2 / 2 / 3;
  }
}  